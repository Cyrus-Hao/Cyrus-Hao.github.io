[{"content":"4.26 鼠鼠打算试试申暑研 善良的老师推了zju的一位做3DGS的大牛 遂开始换方向开始3DGS方向的学习 昨晚和做定位的高手学长聊了下 收获满满捏 周六较闲 开始该方向论文的检索\nVGGT: Visual Geometry Grounded Transformer 介绍了一种前馈神经网络VGGT，能够从单个或多个图像视图中直接预测场景的3D属性，包括相机参数、点图、深度图和3D点轨迹。该模型在多个3D任务中表现出色，如相机参数估计、多视图深度估计和密集点云重建，且处理速度快（不到一秒）。 (一) 输入图像处理 图像分块与特征提取: VGGT首先将输入图像分成小块，使用DINOv2(选择DINOv2是因为其在训练早期阶段表现更稳定，且对超参数（如学习率和动量）不敏感，相比之下，14×14的卷积层在初期可能不稳定)提取特征生成tokens，并添加位置嵌入以保留空间信息 这一步确保模型能稳定处理图像。\n位置嵌入: 在tokens上添加位置嵌入 以保留图像的空间关系。这一步对于保持transformer对空间信息的感知至关重要。\n(二) Transformer架构 交替注意力机制： 模型采用24层的transformer，使用交替注意力机制，交替处理帧内和全局信息。每个注意力层有1024维特征和16个头，类似于DINOv2的ViT-L配置。\n注意力机制交替在帧内（frame-wise）和全局（global）之间工作： 帧内注意力： 关注单个图像帧内的局部细节，适合捕捉细粒度的特征。\n全局注意力： 跨多个视图理解全局场景，适合处理多视图一致性。\n(三) 特征提取与上采样 从特定层(4、11、17和23)提取tokens，通过DPT进行上采样，生成如深度图的高分辨率输出。这一步支持3D属性的精确预测。\n(四) 训练数据增强 图像增强技术： 在训练过程中，随机应用以下增强，以提高模型对各种光照和噪声条件的鲁棒性：\n颜色抖动（Color Jittering）：调整图像的亮度、对比度、饱和度和色调，模拟不同光照条件。\n高斯模糊（Gaussian Blur）：应用模糊效果，模拟真实世界中的成像模糊。\n灰度增强（Grayscale Augmentation）：将图像转换为灰度，测试模型在无颜色信息时的性能。\n图像尺寸调整：\n图像、深度图和点图被等比例调整，使最大维度为518像素。\n较短的维度被裁剪到168~518像素之间，且必须是14像素的倍数，以匹配patchification的patch大小。这一步确保了输入数据的统一性和兼容性。\n(五) 总结 Pointmap Branch 和 Camera Branch Camera Branch Pointmap Branch Code vggt_to_colmap.py 1. 模型加载与推理（run_model 函数） 功能： 从指定目录加载图像，运行 VGGT 模型推理，生成 3D 点云和相机参数。 支持 Pointmap Branch（直接预测 3D 点）和 Depthmap + Camera Branch（通过深度图和相机参数生成点云）。\n1 2 3 4 5 6 7 images = load_and_preprocess_images(image_names).to(device) with torch.no_grad(): with torch.cuda.amp.autocast(dtype=dtype): predictions = model(images) extrinsic, intrinsic = pose_encoding_to_extri_intri(predictions[\u0026#34;pose_enc\u0026#34;], images.shape[-2:]) depth_map = predictions[\u0026#34;depth\u0026#34;] world_points = unproject_depth_map_to_point_map(depth_map, predictions[\u0026#34;extrinsic\u0026#34;], predictions[\u0026#34;intrinsic\u0026#34;]) 输入： 图像目录（target_dir/images）中的图像文件。 预处理： 通过 load_and_preprocess_images 将图像转换为张量（形状 [S, C, H, W]，S 为图像数量）。 推理： 使用 VGGT 模型生成预测，包括 depth（深度图）、world_points（Pointmap Branch 的 3D 点图）、pose_enc（Camera Branch 的姿态编码）。 自动混合精度（torch.cuda.amp.autocast）提高推理效率。 后处理： pose_enc 转换为相机内外参（extrinsic 和 intrinsic）。 深度图通过 unproject_depth_map_to_point_map 结合相机参数生成 3D 点（world_points_from_depth）。 输出： predictions 字典，包含 depth、 world_points、 world_points_from_depth、 extrinsic、 intrinsic 等。\nPointmap Branch： 输出 predictions[\u0026ldquo;world_points\u0026rdquo;]，直接预测每个像素的 3D 坐标（形状 [S, H, W, 3]）。 在 prediction_mode=\u0026ldquo;Pointmap Regression\u0026rdquo; 时使用。 Camera Branch： 输出 predictions[\u0026ldquo;pose_enc\u0026rdquo;]，通过 pose_encoding_to_extri_intri 转换为 extrinsic（4×4 矩阵）和 intrinsic（3×3 矩阵）。 用于相机姿态估计和深度图到点云的转换。\n2. 文件处理（handle_uploads 函数） 功能： 处理用户上传的视频或图像，创建临时目录（input_images_），存储图像文件。 视频会按每秒一帧提取为图像。\n1 2 3 4 5 6 7 8 9 10 11 12 13 timestamp = datetime.now().strftime(\u0026#34;%Y%m%d_%H%M%S_%f\u0026#34;) target_dir = f\u0026#34;input_images_{timestamp}\u0026#34; target_dir_images = os.path.join(target_dir, \u0026#34;images\u0026#34;) if input_video is not None: vs = cv2.VideoCapture(video_path) frame_interval = int(fps * 1) # 1 frame/sec while True: gotit, frame = vs.read() if not gotit: break if count % frame_interval == 0: image_path = os.path.join(target_dir_images, f\u0026#34;{video_frame_num:06}.png\u0026#34;) cv2.imwrite(image_path, frame) 视频处理： 使用 cv2.VideoCapture 按每秒一帧提取图像，保存为 PNG 文件。 图像处理： 直接复制上传的图像到临时目录。 输出： 临时目录路径（target_dir）和图像路径列表（image_paths）。 作用： 为 run_model 提供输入图像目录，确保上传数据格式统一。\n3. 界面更新（update_gallery_on_upload 函数） 功能： 在用户上传视频或图像时，调用 handle_uploads 处理文件，并更新画廊显示上传的图像。\n1 2 3 4 if not input_video and not input_images: return None, None, None, None target_dir, image_paths = handle_uploads(input_video, input_images) return None, target_dir, image_paths, \u0026#34;Upload complete. Click \u0026#39;Reconstruct\u0026#39; to begin 3D processing.\u0026#34; 逻辑: 检查是否有上传内容，若无则返回空值；否则处理文件并返回目录、图像路径和提示信息。 输出: 更新 Gradio 画廊（image_gallery）和日志（log_output）。\n4. 3D 重建（gradio_demo 函数） 功能： 调用 run_model 进行推理，生成 3D 点云和相机参数。 使用 predictions_to_glb 将预测结果转换为 GLB 文件。 支持用户调整参数（如置信度阈值、帧过滤、天空分割）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 predictions = run_model(target_dir, model) np.savez(prediction_save_path, **predictions) glbscene = predictions_to_glb( predictions, conf_thres=conf_thres, filter_by_frames=frame_filter, mask_black_bg=mask_black_bg, mask_white_bg=mask_white_bg, show_cam=show_cam, mask_sky=mask_sky, target_dir=target_dir, prediction_mode=prediction_mode, ) glbscene.export(file_obj=glbfile) 推理： 调用 run_model 获取预测。 保存： 将预测结果保存为 .npz 文件（predictions.npz），便于后续可视化调整。 GLB 生成： predictions_to_glb 根据 prediction_mode 选择使用 world_points（Pointmap Branch）或 world_points_from_depth（Depthmap + Camera Branch）。 应用过滤条件（conf_thres、 mask_sky 等）优化点云。 如果 show_cam=True，在 GLB 中显示相机位置。 输出： GLB 文件路径（glbfile）、日志信息和更新后的帧选择下拉菜单。\nPointmap Branch： 当 prediction_mode=\u0026ldquo;Pointmap Regression\u0026rdquo; 时，使用 predictions[\u0026ldquo;world_points\u0026rdquo;] 作为点云。 直接提供 3D 坐标，减少对相机参数的依赖。\nCamera Branch：\n提供 extrinsic 和 intrinsic，用于： Depthmap 模式下生成 world_points_from_depth。 在 GLB 中可视化相机位置（show_cam=True）。\n5. 辅助功能 clear_fields：清除 3D 查看器、临时目录和画廊，恢复初始状态。 update_log：显示“正在加载和重建”提示。 update_visualization： 当用户调整参数（如 conf_thres、 frame_filter、 prediction_mode）时，加载保存的 .npz 文件，重新生成 GLB 文件。 避免重复运行推理，提高交互效率。 如果是示例数据（is_example=\u0026ldquo;True\u0026rdquo;），提示用户先点击“Reconstruct”。\n","date":"2025-04-26T00:00:00Z","image":"https://Cyrus-hao.github.io/p/week9/p8_hu_a7a83eb15b306951.png","permalink":"https://Cyrus-hao.github.io/p/week9/","title":"Week9"},{"content":"部分学习路线 希望我的学习路线能对大家有所帮助 欢迎批评指正~\n24.9 -\u0026gt; 25.1 江科大stm32(上手度高 与正点原子 野火等相比理论略显不足但有较高动手乐趣) bilibili stm32循迹避障小车(当时买套件学纯代码 可手搓个麦轮小车比买套件有意思) PCB绘图(嘉立创) bilibili 正点原子电机控制(不推荐买课程电机驱动板 容易吃灰) bilibili matlab(感觉不用特意去学 数模快到前几天刷一遍就行) youtube\n24电赛省赛三子棋(视觉部分方法挺多 做着玩锻炼思维 做个完整项目进步还是较快的) opencv(不是特别推荐我看的这个 都去看cs231吧haha) bilibili cs231(部分 后期末考试 鸽) youtube\n25.1 -\u0026gt; 25.2 寒假直接忘本 化身纯摆小子hah 别学 线性代数(吴恩达老师把线代和机器学习混起来讲的 感觉不错 推) bilibili 西瓜书(仅仅止步于第三章 去图书馆边看边睡hah 大部分手撕数学原理 不推荐一开始直接去看) 蓝桥杯嵌入式(力推下面的up 比赛前看的 暑假看的那个模板有一定问题) bilibili\n25.2 -\u0026gt; 25.4(now) 机器学习(吴恩达 挺好就是后面字幕有一定问题 会干扰理解) bilibili 鱼书(神经网络部分直观 反向传播等理论通俗易懂 好！) pytorch(小土堆 讲的超级棒 重视实践 我把他的视频都刷了遍hah) bilibili 强化学习数学原理(公式部分有些看不懂 暂鸽) bilibili 动手学深度学习(在读ing 理论部分清晰 清晰记得当时信息论引入交叉熵豁然开朗) 李沐带读论文系列(在看ing 沐神还是挺有趣的哈哈) bilibili\n","date":"2025-04-23T23:20:21+08:00","image":"https://Cyrus-hao.github.io/p/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/cold_Crime_hu_2bdc603547b3c554.jpg","permalink":"https://Cyrus-hao.github.io/p/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/","title":"前置知识"},{"content":"写在十九岁的起点 今天是我的19岁生日。没有往年的热闹，我选择静静地为自己留一片空间。它不必完美，或许有些凌乱，或许带着点稚气，但它真实，属于我。高考失利让我来到一所不太理想的大学，可这一学期多以来，遇到的好老师和朋友让我觉得，或许一切自有安排。资源有限，探索新东西时总觉得力不从心，抱怨过，但也只能接受。希望通过写博客，记录生活的点滴，反思自己，一步步走向更远的未来，找回属于我的光，慢慢定义人生。\n","date":"2025-04-23T22:46:08+08:00","image":"https://Cyrus-hao.github.io/p/introduction/flower_hu_159fccfeb8a0a588.jpg","permalink":"https://Cyrus-hao.github.io/p/introduction/","title":"Introduction"}]